abline(a = 0, b = 1)
par(mfrow=c(1,1))
plot(xy,
main = "A Chi-Square Plot or Ordered Distances",
yaxs="r",
ylim = c(0,max(xy[,2])),
xlim = c(0,max(xy[,1]))
)
abline(a = 0, b = 1)
cor(sort(dist), p)
q5data <- read.csv("~/Uni/STA347/q5data.csv")
print(q5data)
#Univariate Historgrams
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
hist(q5data[,i], xlab = paste("Variable", i),main = paste("Histogram of variable", i))
}
dat <- as.matrix(q5data)
#Covariance Matrix
dat.cov <- var(dat)
print(dat.cov)
#Compute squared generalised distances
dist <- mahalanobis(dat, colMeans(dat), dat.cov)
print(dist)
#Compute probability levels
u <- ((1:nrow(dat)) - 0.5)/length(dist)
# Chi-Square percentiles based on probability levels (2DF)
p <- qchisq(u, 2)
# Paired data of squared generalised distances and chi-square percentiles
xy <- cbind(chisq.perc= p, sortdist = sort(dist))
print(xy)
#Plot the data of theoretical percentiles and the actual ordered distances
par(mfrow=c(1,1))
plot(xy,
main = "A Chi-Square Plot or Ordered Distances",
yaxs="r",
ylim = c(0,max(xy[,2])),
xlim = c(0,max(xy[,1]))
)
abline(a = 0, b = 1)
cor(sort(dist), p)
xy <- cbind(chisq.percentiles = p, sorted.generalised.dist = sort(dist))
print(xy)
#Plot the data of theoretical percentiles and the actual ordered distances
par(mfrow=c(1,1))
plot(xy,
main = "A Chi-Square Plot or Ordered Distances",
yaxs="r",
ylim = c(0,max(xy[,2])),
xlim = c(0,max(xy[,1]))
)
abline(a = 0, b = 1)
#Compute Correlation Coefficient
cor(sort(dist), p)
q5data <- read.csv("~/Uni/STA347/q5data.csv")
print(q5data)
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
dotchart(q5data[,i],
xlab = paste("Variable", i),
main = paste("DotChart of variable", i))
}
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
plot(q5data[,i],
xlab = paste("Variable", i),
main = paste("DotChart of variable", i))
}
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
dotchart(q5data[,i],
xlab = paste("Variable", i),
main = paste("DotChart of variable", i))
}
#Dot Plots for each variable
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
boxplot(q5data[,i],
xlab = paste("Variable", i),
main = paste("DotChart of variable", i))
}
#Dot Plots for each variable
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
boxplot(q5data[,i],
xlab = paste("Variable", i),
main = paste("Boxplot of variable", i))
}
library(car)
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE)
scale(x = q5data)
q5_standardised <- scale(x = q5data)
print(q5_standardised)
17*5
lapply(colnames(q5_standardised), FUN = min())
lapply(colnames(q5_standardised), FUN = min)
lapply(q5_standardised), FUN = min)
lapply(q5_standardised, FUN = min)
sapply(q5_standardised, FUN = min)
data.frame(q5_standardised)
d5sd <- data.frame(q5_standardised)
View(d5sd)
sapply(d5sd, FUN = min)
q5_standardised <- as.data.frame(scale(x = q5data))
print(q5_standardised)
sapply(q5_standardised, FUN = min)
sapply(q5_standardised, FUN = max)
sapply(q5_standardised, FUN = which(min))
sapply(q5_standardised, FUN = function(x) which(min(x)))
sapply(q5_standardised, FUN = function(x) which(x[min(x)]))
sapply(q5_standardised, FUN = function(x) min(x))
sapply(q5_standardised, FUN = function(x) which(x==min(x)))
sapply(q5_standardised, FUN = function(x) which(x==min(x)))
sapply(q5_standardised, FUN = min)
print(q5_standardised)
rbind(
record.no <-sapply(q5_standardised, FUN = function(x) which(x==min(x)))
value <- sapply(q5_standardised, FUN = min)
)
rbind(
record.no <-sapply(q5_standardised, FUN = function(x) which(x==min(x))),
value <- sapply(q5_standardised, FUN = min)
)
min<- data.frame(
rbind(
record.no <-sapply(q5_standardised, FUN = function(x) which(x==min(x))),
value <- sapply(q5_standardised, FUN = min)
)
)
View(min)
min
min<- data.frame(
t(rbind(
record.no <-sapply(q5_standardised, FUN = function(x) which(x==min(x))),
value <- sapply(q5_standardised, FUN = min)
)
))
min
sapply(q5_standardised, FUN = function(x) which(x==min(x)))
sapply(q5_standardised, FUN = function(x) which(x==min(x)))[2,]
unname(sapply(q5_standardised, FUN = function(x) which(x==min(x))))
min<- data.frame(
record.no <-unname(sapply(q5_standardised, FUN = function(x) which(x==min(x)))),
value <- unname(sapply(q5_standardised, FUN = min))
)
)
min<- data.frame(
record.no <-unname(sapply(q5_standardised, FUN = function(x) which(x==min(x)))),
value <- unname(sapply(q5_standardised, FUN = min))
)
min
View(min)
min<- data.frame(
record.no =unname(sapply(q5_standardised, FUN = function(x) which(x==min(x)))),
value =unname(sapply(q5_standardised, FUN = min))
)
min
min<- data.frame(
variable = colnames(q5_standardised),
record.no =unname(sapply(q5_standardised, FUN = function(x) which(x==min(x)))),
value =unname(sapply(q5_standardised, FUN = min))
)
min
print(q5_standardised)
max<- data.frame(
variable = colnames(q5_standardised),
record.no =unname(sapply(q5_standardised, FUN = function(x) which(x==max(x)))),
std.value =unname(sapply(q5_standardised, FUN = max))
)
max
dat.cov <- var(q5data)
print(dat.cov)
dist <- mahalanobis(q5data, colMeans(q5data), dat.cov)
print(dist)
out <- cbind(q5data, dist)
out
View(max)
View(min)
out[sort(out$dist)]
out[sort(out$dist),]
out
sort(out$dist)
out[sort(out$dist)]
out[order(out$dist),]
out[order(out$dist,decreasing = TRUE),]
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,id.method = "mahal")
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
labels = TRUE,
id.method = "mahal")
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
id.n = 1,
id.method = "mahal")
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
plot.points = FALSE,
id.n = 1,
id.method = "mahal")
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
id.n = 1,
id.method = "mahal")
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
id.n = 1,
id.method = list("x","y"))
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
id.n = 1,
id.method = list("x","y"),
id.col= "red")
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
id.n = 1,
id.method = list("x","y
"))
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
id.n = 1,
id.method = "maha")
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
id.n = 1,
id.method = "mahal")
out[order(out$dist,decreasing = TRUE),]
print(c(min, max))
print(list(min, max))
print(min)
print(max)
out <- cbind(q5data, dist)
out
out <- cbind(q5data, q5_standardised, dist)
out
out[order(out$dist,decreasing = TRUE),]
View(out)
out <- cbind(q5data, dist)
out[order(out$dist,decreasing = TRUE),]
View(q5data)
for (i in 1:ncol(q5data)){
boxplot(q5data[,i],
xlab = paste("Variable", i),
main = paste("Boxplot of variable", i))
}
for (i in 1:ncol(q5data)){
car::Boxplot(q5data[,i],
xlab = paste("Variable", i),
main = paste("Boxplot of variable", i))
}
for (i in 1:ncol(q5data)){
car::Boxplot(q5data[,i],
xlab = paste("Variable", colnames(i)),
main = paste("Boxplot of variable", colnames(i)))
}
colnames(q5data[1]
)
for (i in 1:ncol(q5data)){
car::Boxplot(q5data[,i],
xlab = paste("Variable", colnames(q5data[1])),
main = paste("Boxplot of variable", colnames(q5data[1])))
}
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
car::Boxplot(q5data[,i],
xlab = paste("Variable", colnames(q5data[i])),
main = paste("Boxplot of variable", colnames(q5data[i])))
}
#Multivariabale scatterplot Matrix
scatterplotMatrix(q5data,
main = "Scatterplot Matrix of Q5 Water Usage Data",
diagonal = "boxplot",
smoother = FALSE,
reg.line = FALSE,
id.n = 1,
id.method = "mahal")
print(min)
print(max)
q5_standardised
q5data
for (i in 1:ncol(q5data)){
car::Boxplot(q5data[,i],
ylab = paste("Variable", colnames(q5data[i])),
main = paste("Boxplot of variable", colnames(q5data[i])))
}
par(mfrow = c(2,3))
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
car::Boxplot(q5data[,i],
ylab = paste("Variable", colnames(q5data[i])),
main = paste("Boxplot of variable", colnames(q5data[i])))
}
#Box Plots for each variable
par(mfrow = c(2,3))
for (i in 1:ncol(q5data)){
car::Boxplot(q5data[,i],
ylab = colnames(q5data[i]),
main = paste("Boxplot of variable", colnames(q5data[i])))
}
out[order(out$dist,decreasing = TRUE),]
x2 <- c(18.95,19,17.95,15.54,14,12.95,8.94,7.49,6,3.99)
cars <- cbind(x1, x2)
x1 <- c(1,2,3,3,4,5,6,8,9,11)
x2 <- c(18.95,19,17.95,15.54,14,12.95,8.94,7.49,6,3.99)
cars <- cbind(x1, x2)
x1 <- c(1,2,3,3,4,5,6,8,9,11)
x2 <- c(18.95,19,17.95,15.54,14,12.95,8.94,7.49,6,3.99)
cars <- cbind(x1, x2)
cars
var(cars)
colMeans(cars)
var(cars)
var(cars)*(nrow(cars)-1)/nrow(cars)
cars <- cbind(x1, x2)
cars
var(cars)
var(cars)*(nrow(cars)-1)/nrow(cars)
x1 <- c(9,2,6,5,8)
x2 <- c(12,8,6,4,10)
x3 <- c(3,4,0,2,1)
data <- cbind(x1, x2, x3)
colMeans(data)
#Sample Variance (unbiased)
var(data)
#Sample Variance adjusted for n-deminator
var(data)*(nrow(data)-1)/nrow(data)
cor(data)
#### Exercise 1.2 ####
#Input data
x1 <- c(1,2,3,3,4,5,6,8,9,11)
x2 <- c(18.95,19,17.95,15.54,14,12.95,8.94,7.49,6,3.99)
cars <- cbind(x1, x2)
# Sample means
colMeans(cars)
#Sample Variance (unbiased)
var(cars)
#Sample Variance adjusted for n-deminator
var(cars)*(nrow(cars)-1)/nrow(cars)
##### Exercise 1.3 ######
#Input data
x1 <- c(9,2,6,5,8)
x2 <- c(12,8,6,4,10)
x3 <- c(3,4,0,2,1)
data <- cbind(x1, x2, x3)
# Sample means
colMeans(data)
#Sample Variance (unbiased)
var(data)
#Sample Variance adjusted for n-deminator
var(data)*(nrow(data)-1)/nrow(data)
#Correlation Matrix
cor(data)
q5data <- read.csv("~/Uni/STA347/q5data.csv")
print(q5data)
getwd()
pwd()
getwd()
??cluster
library(devtools)
install_github("qPlanR", username = "deanmarchiori")
library(qPlanR)
agents_required(demandqty = 30, perxmin = 30, serviceduration = 600, targetservetime = 500, targetservicelevel = 0.8)
View(AgentResults)
rep("Jump Around")
rep("Jump Around", 2)
kmeans
edit(kmeans)
tree <- data(trees)
tree <- data(trees)
plot(tree)
tree <- data("trees")
plot(tree)
tree <- data("iris")
plot(tree)
plot(tree)
plot(trees)
library(MVN)
uniPlot(trees, type = "histogram")
ir <- iris[,c(1,2,5)]
ir
library(ggplot2)
ggplot(data = ir, mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) + geom_point()
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = Species, shape = Species ))
ggplot(data = ir) +
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = Species, shape = Species ))
k <- kmeans(x = ir, centers = 3)
k <- kmeans(x = ir[,1:2], centers = 3)
k
ir <- cbind(ir, k$cluster)
ir <- cbind(ir, clust =k$cluster)
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = clust, shape = Species ))
ggplot(data = ir) +
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = clust, shape = Species ))
ir <- cbind(ir, clust =as.factor(k$cluster))
library(ggplot2)
ggplot(data = ir) +
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = clust, shape = Species ))
ggplot(data = ir) +
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = clust, shape = Species ))
ggplot(data = ir) +
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = clust, shape = Species ))+
scale_color_discrete()
ir <- iris[,c(1,2,5)]
k <- kmeans(x = ir[,1:2], centers = 3)
ir <- cbind(ir, clust =as.factor(k$cluster))
ggplot(data = ir) +
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = clust, shape = Species ))
ir <- iris[,c(1,2,5)]
ir$Sepal.Length <- exp(ir$Sepal.Length)
hist(ir$Sepal.Length)
hist(ir$Sepal.Length)
data("iris")
ir <- iris[,c(1,2,5)]
ir$Sepal.Length2 <- exp(ir$Sepal.Length)
hist(ir$Sepal.Length)
hist(ir$Sepal.Length2)
k <- kmeans(x = ir[,1:2], centers = 3)
k <- kmeans(x = ir[, c(2,4), centers = 3)
k <- kmeans(x = ir[, c(2,4)], centers = 3)
k
ir <- cbind(ir, clust =as.factor(k$cluster))
ggplot(data = ir) +
geom_point(mapping = aes(x = Sepal.Length, y = Sepal.Width, colour = clust, shape = Species ))
table(ir$clust, ir$Species)
data("iris")
ir <- iris[,c(1,2,5)]
ir$lnsl <- exp(ir$Sepal.Length)
?log
ir$transsl <- log(ir$lnsl)
ir
uniPlot(ir[,-3], type = "histo")
pairs(ir)
ggplot(data = ir) +
geom_point(mapping = aes(x = lnsl, y = Sepal.Width, shape = Species ))
ggplot(data = ir) +
geom_point(mapping = aes(x = lnsl, y = Sepal.Width, colour = Species ))
ggplot(data = ir) +
geom_point(mapping = aes(x = transsl, y = Sepal.Width, colour = Species ))
k <- kmeans(x = ir[, c(2,4)], centers = 3)
ir <- cbind(ir, clust =as.factor(k$cluster))
ggplot(data = ir) +
geom_point(mapping = aes(x = lnsl, y = Sepal.Width, colour = clust, shape = Species ))
k
k$centres
k$centers
cent <- data.frame(k$centers)
View(cent)
ggplot(data = ir) +
geom_point(mapping = aes(x = lnsl, y = Sepal.Width, colour = clust, shape = Species ))+
geom_point(data = cent, mapping = aes(x = lnsl, y = Sepal.Width))
data("iris")
ir <- iris[,c(1,2,5)]
ir$lnsl <- exp(ir$Sepal.Length)
ir$transsl <- log(ir$lnsl)
k <- kmeans(x = ir[, c(2,5)], centers = 3)
cent <- data.frame(k$centers)
ir <- cbind(ir, clust =as.factor(k$cluster))
gplot(data = ir) +
geom_point(mapping = aes(x = lnsl, y = Sepal.Width, colour = clust, shape = Species ))+
geom_point(data = cent, mapping = aes(x = lnsl, y = Sepal.Width))
ggplot(data = ir) +
geom_point(mapping = aes(x = lnsl, y = Sepal.Width, colour = clust, shape = Species ))+
geom_point(data = cent, mapping = aes(x = lnsl, y = Sepal.Width))
ggplot(data = ir) +
geom_point(mapping = aes(x = transsl, y = Sepal.Width, colour = clust, shape = Species ))+
geom_point(data = cent, mapping = aes(x = transsl, y = Sepal.Width))
setwd("~/R/air")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
